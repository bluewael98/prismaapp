// schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Post {
  id        String     @default(cuid()) @id // Unique identifier for a post, generated using the cuid() function
  title     String     // Title of the post
  content   String?    // Content of the post, optional field
  published Boolean    @default(false) // Indicates whether the post is published or not, default value is false
  author    User?      @relation(fields: [authorId], references: [id]) // Establishes a relation to the User model using the authorId field
  authorId  String?    // Foreign key referencing the ID of the author in the User model
}

model Account {
  id                 String  @id @default(cuid()) // Unique identifier for an account, generated using the cuid() function
  userId             String  @map("user_id") // Maps the userId field to a column named "user_id" in the database
  type               String  // Type of the account
  provider           String  // Provider of the account
  providerAccountId  String  @map("provider_account_id") // Maps the providerAccountId field to a column named "provider_account_id" in the database
  refresh_token      String? // Optional refresh token for the account
  access_token       String? // Optional access token for the account
  expires_at         Int?    // Optional expiration timestamp for the account
  token_type         String? // Optional token type for the account
  scope              String? // Optional scope for the account
  id_token           String? // Optional ID token for the account
  session_state      String? // Optional session state for the account
  oauth_token_secret String? // Optional OAuth token secret for the account
  oauth_token        String? // Optional OAuth token for the account

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Establishes a relation to the User model using the userId field
  @@unique([provider, providerAccountId]) // Enforces uniqueness constraint on the combination of provider and providerAccountId fields
}

model Session {
  id            String    @id @default(cuid()) // Unique identifier for a session, generated using the cuid() function
  sessionToken  String    @unique @map("session_token") // Unique session token, mapped to a column named "session_token" in the database
  userId        String    @map("user_id") // Maps the userId field to a column named "user_id" in the database
  expires       DateTime  // Expiration timestamp of the session
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Establishes a relation to the User model using the userId field
}

model User {
  id              String          @id @default(cuid()) // Unique identifier for a user, generated using the cuid() function
  name            String?         // Name of the user, optional field
  email           String?         @unique // Email of the user, unique constraint enforced
  emailVerified   DateTime?       // Verification timestamp for the email
  image           String?         // Image URL for the user
  posts           Post[]          // List of posts created by the user
  accounts        Account[]       // List of accounts associated with the user
  sessions        Session[]       // List of sessions of the user
}

model VerificationToken {
  id           Int      @id @default(autoincrement()) // Unique identifier for a verification token, automatically incremented
  identifier   String   // Identifier for the verification token
  token        String   @unique // Unique verification token
  expires      DateTime // Expiration timestamp for the verification token

  @@unique([identifier, token]) // Enforces uniqueness constraint on the combination of identifier and token fields
}
